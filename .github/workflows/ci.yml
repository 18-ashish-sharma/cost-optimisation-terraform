name: Test CI

on:
  push:
    branches:
      - main

jobs:
  release-on-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Get the user who triggered the workflow
        id: get-user
        uses: actions/github-script@v6
        with:
          script: |
            const user = process.env.GITHUB_ACTOR;
            return user;
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET }}

      - name: Set version number
        id: version
        run: |
          VERSION=$(grep 'build.version' version.properties | cut -d '=' -f 2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            const tagName = `v${{ env.VERSION }}`;
            const release = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tagName,
            }).catch(error => {
              if (error.status === 404) {
                return null;
              } else {
                throw error;
              }
            });
            return release ? release.data.id : null;
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET }}

      - name: Create or Update Release
        id: create_update_release
        uses: actions/github-script@v6
        with:
          script: |
            const tagName = `v${{ env.VERSION }}`;
            const releaseName = `v${{ env.VERSION }}`;
            const body = `Release created by ${{ steps.get-user.outputs.result }}`;

            if (${{ steps.check_release.outputs.result }} !== null) {
              // Update existing release
              await github.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ steps.check_release.outputs.result }},
                tag_name: tagName,
                name: releaseName,
                body: body,
                draft: false,
                prerelease: false,
              });
            } else {
              // Create new release
              await github.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: releaseName,
                body: body,
                draft: false,
                prerelease: false,
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET }}
